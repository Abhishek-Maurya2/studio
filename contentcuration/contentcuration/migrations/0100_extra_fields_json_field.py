# -*- coding: utf-8 -*-
# Semi-automatically generated by Micah 1.11.20 on 2019-04-24 23:05
from __future__ import unicode_literals

import django.contrib.postgres.fields.jsonb
from django.db import migrations, connection
import ast
import json

from contentcuration.models import ContentNode

from django.db.migrations.operations.fields import AlterField
from django.db.migrations.operations.utils import is_referenced_by_foreign_key
from django.db.models.fields import NOT_PROVIDED

class Migration(migrations.Migration):

    dependencies = [
        ('contentcuration', '0098_auto_20190425_0023'),
    ]

    # class MyCustomOperation(AlterField):

    #     # If this is False, it means that this operation will be ignored by
    #     # sqlmigrate; if true, it will be run and the SQL collected for its output.
    #     reduces_to_sql = False

    #     # If this is False, Django will refuse to reverse past this operation.
    #     reversible = False

    #     def __init__(self, model_name, name, field, preserve_default=False):
    #         # Operations are usually instantiated with arguments in migration
    #         # files. Store the values of them on self for later use.
    #         self.preserve_default = preserve_default
    #         self.model_name = model_name
    #         self.name = name
    #         self.field = field

    #         pass

    #     def state_forwards(self, app_label, state):
    #         # The Operation should take the 'state' parameter (an instance of
    #         # django.db.migrations.state.ProjectState) and mutate it to match
    #         # any schema changes that have occurred.
    #         if not self.preserve_default:
    #             field = self.field.clone()
    #             field.default = NOT_PROVIDED
    #         else:
    #             field = self.field
    #         state.models[app_label, self.model_name_lower].fields = [
    #             (n, field if n == self.name else f)
    #             for n, f in
    #             state.models[app_label, self.model_name_lower].fields
    #         ]
    #         # TODO: investigate if old relational fields must be reloaded or if it's
    #         # sufficient if the new field is (#27737).
    #         # Delay rendering of relationships if it's not a relational field and
    #         # not referenced by a foreign key.
    #         delay = (
    #             not field.is_relation and
    #             not is_referenced_by_foreign_key(state, self.model_name_lower, self.field, self.name)
    #         )
    #         state.reload_model(app_label, self.model_name_lower, delay=delay)
    #         import ipdb; ipdb.set_trace()
    #         pass

    #     def database_forwards(self, app_label, schema_editor, from_state, to_state):
    #         # The Operation should use schema_editor to apply any changes it
    #         # wants to make to the database.
    #         pass

    #     def database_backwards(self, app_label, schema_editor, from_state, to_state):
    #         # If reversible is True, this is called when the operation is reversed.
    #         pass

    #     def describe(self):
    #         # This is used to describe what the operation does in console output.
    #         return "Custom Operation"

    def copy_forwards(apps, schema_editor):
        ContentNode = apps.get_model('contentcuration', 'contentnode')
        with connection.cursor() as cursor:
            cursor.execute("UPDATE %s SET extra_fields_json=to_json(extra_fields);" % ContentNode._meta.db_table)

    def copy_backwards(apps, schema_editor):
        pass


    operations = [
        # migrations.AddField(
        #     model_name='contentnode',
        #     name='extra_fields_json',
        #     field=django.contrib.postgres.fields.jsonb.JSONField(null=True, blank=True, default=None),
        # ),
        # migrations.RunPython(copy_forwards, copy_backwards),
        migrations.RunSQL(
            [
                "ALTER TABLE %s ALTER COLUMN extra_fields TYPE jsonb USING to_json(extra_fields);" % ContentNode._meta.db_table,
                # "UPDATE %s SET extra_fields_json=to_json(extra_fields);" % ContentNode._meta.db_table,
                # "ALTER TABLE %s DROP COLUMN extra_fields;" % ContentNode._meta.db_table,
                # "ALTER TABLE %s RENAME COLUMN extra_fields_json TO extra_fields;" % ContentNode._meta.db_table,
            ],
            state_operations=[
                migrations.AlterField(
                    'contentnode',
                    'extra_fields',
                    django.contrib.postgres.fields.jsonb.JSONField(null=True, blank=True, default=None),
                ),
            ]
        ),
        # migrations.RemoveField(model_name='contentnode', name='extra_fields'),
        # migrations.RenameField(
        #     model_name='contentnode',
        #     old_name='extra_fields_json',
        #     new_name='extra_fields',
        # ),
    ]

